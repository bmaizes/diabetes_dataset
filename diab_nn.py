from numpy import loadtxt
import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.regularizers import l2
from sklearn.preprocessing import StandardScaler

dataset = loadtxt('pima-indians-diabetes.data.csv', delimiter=',')
X = dataset[:,0:8]
y = dataset[:,8]

train = np.array([551,419,462,373,596,23,456,584,246,595,457,685,656,723,19,225,69,316,545,219,237,477,400,153,194,317,195,469,203,554,677,353,700,116,492,357
,705,725,602,166,310,355,569,339,482,139,158,402,150,416,120,108,641,737
,439,326,478,280,398,40,699,328,109,3,609,529,577,145,185,156,181,296
,191,572,52,375,434,636,542,22,89,516,521,739,483,9,517,459,148,2
,81,532,512,441,56,424,461,30,256,648,748,5,443,180,527,29,650,137
,660,125,743,409,385,508,433,82,157,25,264,406,261,640,511,630,429,598
,745,488,106,704,164,101,331,313,87,417,196,190,580,97,298,334,617,384
,214,376,208,607,734,549,228,212,466,659,350,493,556,694,295,610,612,405
,314,688,211,193,415,132,140,172,503,683,628,721,386,476,399,117,550,543
,70,528,186,502,422,671,201,288,573,749,305,351,449,218,192,250,347,65
,79,272,96,48,170,238,142,217,379,45,480,509,266,395,42,315,413,202
,174,304,21,414,619,661,430,579,251,241,421,260,731,450,396,722,338,401
,54,12,62,167,546,306,649,475,707,667,701,741,273,141,611,312])
X_train = X[train]
y_train = y[train]

sc = StandardScaler()
X_train = sc.fit_transform(X_train)

model = Sequential() 
model.add(Dense(3, input_dim=8, activation='relu', kernel_regularizer=l2(), bias_regularizer=l2()))
model.add(Dropout(0.35))
model.add(Dense(3, activation='relu', kernel_regularizer=l2(), bias_regularizer=l2()))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=200, batch_size=10)

predictions = model.predict(X_train)
rounded = [round(x[0]) for x in predictions]

_, accuracy = model.evaluate(X_train, y_train)
print('Accuracy: %.2f' % (accuracy*100))

# for i in range(5):
# 	print('%s => %d (expected %d)' % (X_train[i].tolist(), predictions[i], y_train[i]))

test = np.array([232,235,337,284,171,189,637,105,307,123,287,505,80,463,606,479,481,86,4,445,24,187,559,448,51,474,653,197,359,83,544,122,252,645,16,362
,121,367,681,693,686,635,583,71,585,188,363,255,594,279,85,382,626,64
,394,160,643,28,10,178,11,289,728,708,230,719,37,669,258,438,504,624
,323,76,294,75,500,588,336,236,205,119,501,627,146,370,652,676,371,144
,162,565,308,84,199,358,342,644,277,513,633,286,605,34,18,727,39,697
,525,614,173,374,216,91,322,599,361,198,698,383,574,183,292,257,615,319
,578,618,638,447,431,437,49,523,715,220,128,240,67,730,639,159,724,365
,632,575,675,127,709,631,149,0,668,377,60,124,538,95,657,176,410,59
,733,537,99,265,100,248,346,491,442,590,629,623,625,114,427,515,514,7
,66,300,666,702,388,487,608,411,600,541,104,470,426,604,163,177,654,68
,729,558,458,276,275,345,678,226,38,8,143,372,403,658,209,55,557,206
,589,73,716,586,440,98,50,714,130,285,720,113,368,713,90,340,341,663
,329,115,222,349,26,169,533,597,444,63,690,744,291,233,227,111])
X_test = X[test]
y_test = y[test]

X_test = sc.fit_transform(X_test)


_, accuracy = model.evaluate(X_test, y_test)
print('Accuracy: %.2f' % (accuracy*100))